// <auto-generated />
using Grafos.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Grafos.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251020035523_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Grafos.Models.Carretera", b =>
                {
                    b.Property<int>("CarreteraId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarreteraId"));

                    b.Property<int>("CiudadDestinoId")
                        .HasColumnType("int");

                    b.Property<int>("CiudadOrigenId")
                        .HasColumnType("int");

                    b.Property<double>("DistanciaKm")
                        .HasColumnType("float");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<double>("TiempoEstimado")
                        .HasColumnType("float");

                    b.Property<int>("TipoCarreteraId")
                        .HasColumnType("int");

                    b.HasKey("CarreteraId");

                    b.HasIndex("CiudadDestinoId");

                    b.HasIndex("CiudadOrigenId");

                    b.HasIndex("TipoCarreteraId");

                    b.ToTable("Carreteras");
                });

            modelBuilder.Entity("Grafos.Models.Ciudad", b =>
                {
                    b.Property<int>("CiudadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CiudadId"));

                    b.Property<double>("Latitud")
                        .HasColumnType("float");

                    b.Property<double>("Longitud")
                        .HasColumnType("float");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaisId")
                        .HasColumnType("int");

                    b.Property<int>("Poblacion")
                        .HasColumnType("int");

                    b.HasKey("CiudadId");

                    b.HasIndex("PaisId");

                    b.ToTable("Ciudades");
                });

            modelBuilder.Entity("Grafos.Models.Pais", b =>
                {
                    b.Property<int>("PaisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaisId"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaisId");

                    b.ToTable("Paises");
                });

            modelBuilder.Entity("Grafos.Models.TipoCarretera", b =>
                {
                    b.Property<int>("TipoCarreteraId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TipoCarreteraId"));

                    b.Property<double>("CostoPeajeKm")
                        .HasColumnType("float");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("VelocidadMaxima")
                        .HasColumnType("float");

                    b.HasKey("TipoCarreteraId");

                    b.ToTable("TiposCarretera");
                });

            modelBuilder.Entity("Grafos.Models.Carretera", b =>
                {
                    b.HasOne("Grafos.Models.Ciudad", "CiudadDestino")
                        .WithMany("CarreterasDestino")
                        .HasForeignKey("CiudadDestinoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Grafos.Models.Ciudad", "CiudadOrigen")
                        .WithMany("CarreterasOrigen")
                        .HasForeignKey("CiudadOrigenId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Grafos.Models.TipoCarretera", "Tipo")
                        .WithMany("Carreteras")
                        .HasForeignKey("TipoCarreteraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CiudadDestino");

                    b.Navigation("CiudadOrigen");

                    b.Navigation("Tipo");
                });

            modelBuilder.Entity("Grafos.Models.Ciudad", b =>
                {
                    b.HasOne("Grafos.Models.Pais", "Pais")
                        .WithMany("Ciudades")
                        .HasForeignKey("PaisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pais");
                });

            modelBuilder.Entity("Grafos.Models.Ciudad", b =>
                {
                    b.Navigation("CarreterasDestino");

                    b.Navigation("CarreterasOrigen");
                });

            modelBuilder.Entity("Grafos.Models.Pais", b =>
                {
                    b.Navigation("Ciudades");
                });

            modelBuilder.Entity("Grafos.Models.TipoCarretera", b =>
                {
                    b.Navigation("Carreteras");
                });
#pragma warning restore 612, 618
        }
    }
}
